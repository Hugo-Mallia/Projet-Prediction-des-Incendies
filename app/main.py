from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from app.routes.scan_environment import router as scan_router
from app.routers.items import router as items_router
from app.services.audit_service import evaluate_audit
import gradio as gr

app = FastAPI()

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Setup templates
templates = Jinja2Templates(directory="templates")

app.include_router(scan_router, prefix="/api")
app.include_router(items_router, prefix="/api")

@app.get("/")
async def root(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

def audit_chatbot():
    questions = [
        ("Bonjour, je suis Flam√©o, votre auditeur s√©curit√© incendie. Pour commencer, quel est le nom du b√¢timent √† auditer‚ÄØ?", "buildingName"),
        ("Merci. Quel est le type de b√¢timent (immeuble, maison, entrep√¥t, usine, √©tablissement public)‚ÄØ?", "buildingType"),
        ("Tr√®s bien. Quel est l'usage principal du b√¢timent (professionnel ou personnel)‚ÄØ?", "buildingUsage"),
        ("Pouvez-vous m‚Äôindiquer la taille du b√¢timent en m¬≤‚ÄØ?", "buildingSize"),
        ("Combien d‚Äôextincteurs sont pr√©sents dans le b√¢timent‚ÄØ?", "fireExtinguishers"),
        ("Combien de sorties de secours sont disponibles‚ÄØ?", "emergencyExits"),
        ("Combien de d√©tecteurs de fum√©e sont install√©s‚ÄØ?", "smokeDetectors"),
        ("Quelle est la date du dernier exercice d‚Äô√©vacuation (AAAA-MM-JJ)‚ÄØ?", "fireDrills"),
        ("Combien de pi√®ces compte le b√¢timent‚ÄØ?", "roomCount"),
        ("Merci. Quelle est la taille de chaque pi√®ce (en m¬≤, s√©par√©es par des virgules)‚ÄØ?", "roomSizes"),
        ("Quels sont les mat√©riaux de construction principaux‚ÄØ?", "constructionMaterials"),
        ("Un plan d‚Äô√©vacuation est-il disponible et affich√© (oui/non)‚ÄØ?", "evacuationPlan"),
        ("Combien de sessions de formation en s√©curit√© incendie ont eu lieu cette ann√©e‚ÄØ?", "trainingSessions"),
        ("Sur une √©chelle de 1 √† 5, quel est le niveau de sensibilisation du personnel √† la s√©curit√© incendie‚ÄØ?", "staffAwareness"),
    ]
    state = {}

    def chat_fn(message, history):
        idx = len(history)
        if idx < len(questions):
            key = questions[idx-1][1] if idx > 0 else None
            if key:
                state[key] = message
            if idx < len(questions):
                # Ajoute une relance personnalis√©e
                if idx == 1:
                    return questions[idx][0] + " (N'h√©sitez pas √† me donner des d√©tails.)"
                return questions[idx][0]
        else:
            key = questions[-1][1]
            state[key] = message
            # Conversion des types
            try:
                state["buildingSize"] = int(state["buildingSize"])
                state["fireExtinguishers"] = int(state["fireExtinguishers"])
                state["emergencyExits"] = int(state["emergencyExits"])
                state["smokeDetectors"] = int(state["smokeDetectors"])
                state["roomCount"] = int(state["roomCount"])
                state["trainingSessions"] = int(state["trainingSessions"])
                state["staffAwareness"] = int(state["staffAwareness"])
            except Exception:
                return "Je n'ai pas compris une des valeurs num√©riques, pouvez-vous v√©rifier votre saisie‚ÄØ?"
            result = evaluate_audit(state)
            # R√©ponse finale personnalis√©e
            return (
                "Merci pour toutes ces informations, je vais maintenant analyser la conformit√© de votre b√¢timent.\n\n"
                f"**Statut de l'audit** : {result.status}\n"
                f"**R√©sum√©** : {result.message}\n"
                f"**Recommandations personnalis√©es** :\n- " + "\n- ".join(result.recommendations) +
                "\n\nN'h√©sitez pas √† me solliciter pour un nouvel audit ou pour toute question compl√©mentaire."
            )
        return ""

    with gr.Blocks() as demo:
        gr.Markdown("## üë©‚Äçüöí Flam√©o  - Votre auditeur virtuel\nDiscutez avec votre auditeur pour r√©aliser un audit s√©curit√© incendie personnalis√©.")
        chatbot = gr.ChatInterface(chat_fn)
        gr.Button("‚¨ÖÔ∏è Retour √† l'accueil").click(
            None,
            None,
            None,
            js="window.location.href='/'"
        )
    return demo

# Int√©gration Gradio sur /audit-bot
app = gr.mount_gradio_app(app, audit_chatbot(), path="/audit-bot")
