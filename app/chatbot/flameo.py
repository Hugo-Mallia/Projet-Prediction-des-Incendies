from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from app.routers.items import router as items_router
from app.services.audit_service import evaluate_audit
from app.models.schemas import RiskAssessment

import gradio as gr
from dotenv import load_dotenv
import os
import re
from typing import Dict, List, Optional, Any, Tuple, Union
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum
import json
import logging
from pathlib import Path

from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from langchain_core.prompts import ChatPromptTemplate, SystemMessagePromptTemplate, HumanMessagePromptTemplate, MessagesPlaceholder
from langchain_core.output_parsers import StrOutputParser, PydanticOutputParser
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_openai import ChatOpenAI
from pydantic import BaseModel, Field

from app.chatbot.audit_state import SmartAuditState

load_dotenv()

class EnhancedChatMessageHistory(BaseChatMessageHistory):
    def __init__(self):
        self.messages = []

    def add_message(self, message):
        self.messages.append(message)

    def clear(self):
        self.messages = []

class FlameoChatbotEnhanced:
    def __init__(self):
        self.llm = ChatOpenAI(temperature=0.3, model="gpt-4o-mini")
        
        system_prompt = """Tu es Flam√©o üî•, expert IA en s√©curit√© incendie de nouvelle g√©n√©ration.

CAPACIT√âS AVANC√âES:
‚Ä¢ Analyse contextuelle intelligente des r√©ponses
‚Ä¢ D√©tection automatique des incoh√©rences et risques
‚Ä¢ G√©n√©ration de questions de suivi pertinentes
‚Ä¢ Recommandations personnalis√©es en temps r√©el
‚Ä¢ Base de connaissances exhaustive sur les normes fran√ßaises et europ√©ennes

NORMES DE R√âF√âRENCE:
‚Ä¢ Code du travail (R4227-28 √† R4227-41)
‚Ä¢ R√®glement de s√©curit√© ERP
‚Ä¢ Normes NF et EN sur √©quipements
‚Ä¢ Classification feu mat√©riaux (Euroclasses)
‚Ä¢ IGH, ICPE selon contexte

ANALYSE INTELLIGENTE:
‚Ä¢ Calculs automatiques des ratios r√©glementaires
‚Ä¢ D√©tection des zones √† risque selon occupation/surface
‚Ä¢ √âvaluation de la charge calorique
‚Ä¢ Pr√©diction des sc√©narios d'√©vacuation
‚Ä¢ Identification des non-conformit√©s critiques

Tu adaptes tes questions selon le contexte, d√©tectes les probl√®mes potentiels et fournis des explications p√©dagogiques.
Ton objectif : un audit complet et des recommandations actionnables."""
        
        self.prompt = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(system_prompt),
            MessagesPlaceholder(variable_name="history"),
            HumanMessagePromptTemplate.from_template("{input}")
        ])
        
        self.chat_history = EnhancedChatMessageHistory()
        chain = self.prompt | self.llm | StrOutputParser()
        
        self.conversation = RunnableWithMessageHistory(
            chain,
            lambda session_id: self.chat_history,
            input_messages_key="input",
            history_messages_key="history",
        )
        
        self.audit_state = SmartAuditState()
        self.greeting_sent = False
        
        self.risk_parser = PydanticOutputParser(pydantic_object=RiskAssessment)
    
    def convert_history(self, history):
        messages = []
        for entry in history:
            if isinstance(entry, dict) and "role" in entry:
                if entry["role"] == "user":
                    messages.append(HumanMessage(content=entry["content"]))
                elif entry["role"] == "assistant":
                    messages.append(AIMessage(content=entry["content"]))
        
        self.chat_history.messages = messages
        return messages
    
    def generate_contextual_insights(self) -> str:
        if not self.audit_state.contextual_insights:
            return ""
        
        insights_text = "\n\nüß† **ANALYSE INTELLIGENTE:**\n"
        
        for insight in self.audit_state.contextual_insights:
            urgency_emoji = {
                RiskLevel.LOW: "üü¢",
                RiskLevel.MEDIUM: "üü°", 
                RiskLevel.HIGH: "üü†",
                RiskLevel.CRITICAL: "üî¥"
            }.get(insight.urgency, "‚ÑπÔ∏è")
            
            insights_text += f"{urgency_emoji} {insight.message}"
            
            if insight.related_norms:
                insights_text += f"\n   üìã *Normes: {', '.join(insight.related_norms)}*"
            insights_text += "\n"
        
        return insights_text
    
    def perform_intelligent_analysis(self) -> RiskAssessment:
        try:
            data = self.audit_state.data
            
            compliance_score = self._calculate_compliance_score(data)
            fire_risk = self._assess_fire_risk(data)
            structural_risk = self._assess_structural_risk(data)
            evacuation_risk = self._assess_evacuation_risk(data)
            equipment_adequacy = self._assess_equipment_adequacy(data)
            priority_actions = self._generate_priority_actions(data)
            
            return RiskAssessment(
                fire_risk=fire_risk,
                structural_risk=structural_risk,
                evacuation_risk=evacuation_risk,
                equipment_adequacy=equipment_adequacy,
                compliance_score=compliance_score,
                priority_actions=priority_actions
            )
            
        except Exception as e:
            logger.error(f"Erreur lors de l'analyse intelligente: {e}")
            return RiskAssessment(
                fire_risk=RiskLevel.MEDIUM,
                structural_risk=RiskLevel.MEDIUM,
                evacuation_risk=RiskLevel.MEDIUM,
                equipment_adequacy=5.0,
                compliance_score=50.0,
                priority_actions=["V√©rification g√©n√©rale recommand√©e"]
            )
    
    def complete_audit(self):
        try:
            self._final_validation()
            risk_assessment = self.perform_intelligent_analysis()
            traditional_result = evaluate_audit(self.audit_state.data)
            contextual_insights = self.generate_contextual_insights()
            building_name = self.audit_state.data.get('buildingName', 'votre b√¢timent')
            
            final_report = f"""
üéØ **AUDIT TERMIN√â POUR {building_name.upper()}**

üìä **√âVALUATION GLOBALE:**
‚Ä¢ Score de conformit√©: **{risk_assessment.compliance_score:.1f}%**
‚Ä¢ Ad√©quation √©quipements: **{risk_assessment.equipment_adequacy:.1f}/10**

üîç **ANALYSE DES RISQUES:**
‚Ä¢ Risque incendie: **{risk_assessment.fire_risk.value.upper()}** üî•
‚Ä¢ Risque structurel: **{risk_assessment.structural_risk.value.upper()}** üèóÔ∏è
‚Ä¢ Risque √©vacuation: **{risk_assessment.evacuation_risk.value.upper()}** üö™

{contextual_insights}

üéØ **PLAN D'ACTION PRIORITAIRE:**
"""
            
            for i, action in enumerate(risk_assessment.priority_actions, 1):
                final_report += f"{i}. {action}\n"
            
            final_report += f"""
üìã **√âVALUATION TRADITIONNELLE:**
‚Ä¢ Statut: {traditional_result.status}
‚Ä¢ {traditional_result.message}

üí° **RECOMMANDATIONS PERSONNALIS√âES:**
{traditional_result.recommendations}

---
*Audit r√©alis√© par Flam√©o IA - Expert en s√©curit√© incendie*
*Pour toute question technique, je reste √† votre disposition ! üî•*
"""
            
            return self.conversation.invoke(
                {"input": final_report},
                {"configurable": {"session_id": "audit_session"}}
            )
            
        except Exception as e:
            logger.error(f"Erreur lors de la finalisation de l'audit: {e}")
            return f"‚ùå Erreur lors de l'analyse finale: {str(e)}. Les donn√©es collect√©es sont sauvegard√©es. Voulez-vous recommencer l'audit ?"
    
    def _final_validation(self):
        data = self.audit_state.data
        
        if "roomSizes" in data and "buildingSize" in data:
            total_rooms = sum(data["roomSizes"]) if isinstance(data["roomSizes"], list) else 0
            if total_rooms > data["buildingSize"] * 1.5:
                raise ValueError("Incoh√©rence: superficie totale des pi√®ces excessive")
        
        if "maxOccupancy" in data and "buildingSize" in data:
            density = data["maxOccupancy"] / data["buildingSize"]
            if density > 10:
                raise ValueError(f"Densit√© d'occupation irr√©aliste: {density:.1f} pers/m¬≤")
        
        if data.get("fireExtinguishers", 0) == 0 and data.get("buildingSize", 0) > 50:
            logger.warning("Aucun extincteur dans un b√¢timent de taille significative")
        
        if data.get("emergencyExits", 0) == 0:
            raise ValueError("Aucune sortie de secours d√©clar√©e - Information critique manquante")